package loci.formats.in;


import java.io.IOException;
import loci.common.RandomAccessInputStream;
import loci.formats.*;
import loci.formats.meta.MetadataStore;
import ome.units.quantity.Length;



public class ISQReader extends FormatReader {


    // -- Constants --
    private static final String ISQ_checker = "CTDATA-HEADER_V1";

    // -- Fields --
    private int[] offsets;
    private short nDimensions;

    // -- Constructor --
    /** Constructs a new ISQ reader. */
    public ISQReader() {
        super("ISQ", "ISQ");
        suffixSufficient = false;
        domains = new String[]{"X-ray Imaging"};
        datasetDescription = "a single .isq file";
    }


    // -- IFormatReader API methods --

    /** @see loci.formats.IFormatReader#isThisType(RandomAccessInputStream) */
    public boolean isThisType(RandomAccessInputStream stream) throws IOException {
        final int blockLen = 512;
        LOGGER.info("@type checker");
        if (!FormatTools.validStream(stream, blockLen, false)) {
            return false;
        } else {
            stream.seek(508L);
            String lastFour = stream.readString(4);
            return lastFour.equals("ISQ");
        }
    }

    /** @see loci.formats.IFormatReader#openBytes(int, byte[], int, int, int, int) */
    //Obtains a sub-image of the specified image plane into a pre-allocated byte array.
    public byte[] openBytes(int no, byte[] buf, int x, int y, int w, int h) throws FormatException, IOException {
        FormatTools.checkPlaneParameters(this, no, buf.length, x, y, w, h);
        this.in.seek((long)(this.offsets[no]));
        this.readPlane(this.in, x, y, w, h,0, buf);

        return buf;
    }

    /** @see loci.formats.IFormatReader#close(boolean) */
    public void close(boolean fileOnly) throws IOException {
        super.close(fileOnly);
        if (!fileOnly) {
            this.offsets = null;
        }
    }

    // -- Internal FormatReader API methods --

    /** @see loci.formats.FormatReader#initFile(String) */
    @Override
    protected void initFile(String id) throws FormatException, IOException {
        super.initFile(id);
        this.in = new RandomAccessInputStream(id);
        this.in.order(true);
        boolean isSigned = true;

        LOGGER.info("Reading header");

            int [] META = new int[32];
            for(int i=0; i<META.length; i++){
                META[i] = this.in.readInt();
            }

            String imageName = this.in.readString(40); //name at char[40]
            this.in.seek(0);
            String first16checker = this.in.readString(16);
            if(first16checker.startsWith(ISQ_checker)) {

                int dataType = META[4];
                int numBytes = META[5];
                int numBlocks = META[6];
                int patientIndex = META[7];
                int scannerId = META[8];

                CoreMetadata m = (CoreMetadata)this.core.get(0);

                //dimx_p is the dimension in pixels, dimx_um the dimension in microns.
                m.sizeX = META[11]; //dimx_p
                //in.skipBytes(4);
                m.sizeY = META[12]; //dimy_p
                //in.skipBytes(4);
                m.sizeZ = META[13]; //dimz_p

                if (this.getSizeT() == 0) {
                    m.sizeT = 1;
                }
                if (this.getSizeC() == 0) {
                    m.sizeC = 1;
                }
                if (this.getSizeZ() == 0) {
                    m.sizeZ = 1;
                }

                int x_um = META[15]; //dimx_um
                int y_um = META[16]; //dimy_um
                int z_um = META[17]; //dimz_um

                if (getImageCount() == 0) {
                    m.imageCount = this.getSizeZ() * this.getSizeT() * this.getSizeC();
                } else {
                    m.imageCount = getImageCount();
                }
                this.offsets = new int[this.getImageCount()];


                LOGGER.info("Calculating image offsets");
                int offset;

                offset = 512 * (META[31] + 1) -1;

                for (int i = 0; i < this.getSizeC(); ++i) {
                    for (int j = 0; j < this.getSizeZ(); j++) {
                        this.offsets[i * this.getSizeZ() + j] = offset + j * this.getSizeX() * this.getSizeY() * 2;
                    }
                    offset += this.getSizeX() * this.getSizeY() * this.getSizeZ();
                }

                this.addGlobalMeta("Image name", imageName);
                this.addGlobalMeta("Number of dimensions", this.nDimensions);
                this.addGlobalMeta("first16", first16checker);
                this.addGlobalMeta("dataType", dataType);
                this.addGlobalMeta("nr_of_bytes", numBytes);
                this.addGlobalMeta("nr_of_blocks", numBlocks);
                this.addGlobalMeta("patient index", patientIndex);
                this.addGlobalMeta("scanner id", scannerId);

                LOGGER.info("Populating metadata");
                m.seriesMetadata = getSeriesMetadata();
                m.dimensionOrder = "XYZCT";
                m.thumbSizeY = 128;
                m.thumbSizeX = 128;
                m.pixelType = FormatTools.pixelTypeFromBytes(2, isSigned, false);
                m.metadataComplete = true;

            LOGGER.info("Populating OME metadata");
            // The metadata store we're working with.
            MetadataStore store = this.makeFilterMetadata();
            MetadataTools.populatePixels(store,this);
            store.setImageName(imageName, 0);

            if (this.getMetadataOptions().getMetadataLevel() != MetadataLevel.MINIMUM) {
                String instrumentID = MetadataTools.createLSID("Instrument", new int[]{0});
                store.setInstrumentID(instrumentID, 0);
                store.setImageInstrumentRef(instrumentID, 0);

                //Formats the input value for the physical size into a length in microns
                Length sizeX = FormatTools.getPhysicalSizeX((double) x_um);
                Length sizeY = FormatTools.getPhysicalSizeY((double) y_um);
                Length sizeZ = FormatTools.getPhysicalSizeZ((double) z_um);
                if (sizeX != null) {
                    store.setPixelsPhysicalSizeX(sizeX, 0);
                }
                if (sizeY != null) {
                    store.setPixelsPhysicalSizeY(sizeY, 0);
                }
                if (sizeZ != null) {
                    store.setPixelsPhysicalSizeZ(sizeZ, 0);
                }
                for (int i = 0; i < this.getSizeC(); i++) {
                    store.setDetectorSettingsOffset((double) this.offsets[i], i, 0);
                    String detectorID = MetadataTools.createLSID("Detector", new int[]{0, i});
                    store.setDetectorID(detectorID, 0, i);
                    store.setDetectorType(this.getDetectorType("Other"), 0, i);
                    store.setDetectorSettingsID(detectorID, 0, i);

                    }

                }
            }

        }

    }


